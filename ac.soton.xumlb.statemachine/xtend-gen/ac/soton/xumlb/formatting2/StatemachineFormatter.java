/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xumlb.formatting2;

import ac.soton.eventb.statemachines.AbstractNode;
import ac.soton.eventb.statemachines.Statemachine;
import ac.soton.eventb.statemachines.Transition;
import ac.soton.xumlb.services.StatemachineGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class StatemachineFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private StatemachineGrammarAccess _statemachineGrammarAccess;
  
  protected void _format(final Statemachine statemachine, @Extension final IFormattableDocument document) {
    EList<AbstractNode> _nodes = statemachine.getNodes();
    for (final AbstractNode abstractNode : _nodes) {
      document.<AbstractNode>format(abstractNode);
    }
    EList<Transition> _transitions = statemachine.getTransitions();
    for (final Transition transition : _transitions) {
      document.<Transition>format(transition);
    }
  }
  
  protected void _format(final Transition transition, @Extension final IFormattableDocument document) {
  }
  
  public void format(final Object statemachine, final IFormattableDocument document) {
    if (statemachine instanceof Statemachine) {
      _format((Statemachine)statemachine, document);
      return;
    } else if (statemachine instanceof Transition) {
      _format((Transition)statemachine, document);
      return;
    } else if (statemachine instanceof XtextResource) {
      _format((XtextResource)statemachine, document);
      return;
    } else if (statemachine instanceof EObject) {
      _format((EObject)statemachine, document);
      return;
    } else if (statemachine == null) {
      _format((Void)null, document);
      return;
    } else if (statemachine != null) {
      _format(statemachine, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(statemachine, document).toString());
    }
  }
}
