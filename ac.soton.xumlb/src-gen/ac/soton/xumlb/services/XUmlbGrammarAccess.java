/*
 * generated by Xtext 2.22.0
 */
package ac.soton.xumlb.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XUmlbGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class XUMLBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XUMLB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUMLBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElaboratesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElaboratesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cElaboratesEventBNamedCommentedComponentElementCrossReference_2_1_0 = (CrossReference)cElaboratesAssignment_2_1.eContents().get(0);
		private final RuleCall cElaboratesEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cElaboratesEventBNamedCommentedComponentElementCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefinesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefinesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefinesUMLBCrossReference_3_1_0 = (CrossReference)cRefinesAssignment_3_1.eContents().get(0);
		private final RuleCall cRefinesUMLBQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cRefinesUMLBCrossReference_3_1_0.eContents().get(1);
		private final Assignment cDiagramsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDiagramsXDiagramParserRuleCall_4_0 = (RuleCall)cDiagramsAssignment_4.eContents().get(0);
		
		//XUMLB ediagrams::UMLB:
		//	'UMLB'
		//	name=ID ('elaborates' elaborates=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName])? ('refines'
		//	refines=[ediagrams::UMLB|QualifiedName])?
		//	diagrams+=XDiagram*;
		@Override public ParserRule getRule() { return rule; }
		
		//'UMLB' name=ID ('elaborates' elaborates=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName])? ('refines'
		//refines=[ediagrams::UMLB|QualifiedName])? diagrams+=XDiagram*
		public Group getGroup() { return cGroup; }
		
		//'UMLB'
		public Keyword getUMLBKeyword_0() { return cUMLBKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('elaborates' elaborates=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_2_0() { return cElaboratesKeyword_2_0; }
		
		//elaborates=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName]
		public Assignment getElaboratesAssignment_2_1() { return cElaboratesAssignment_2_1; }
		
		//[eventbcore::EventBNamedCommentedComponentElement|QualifiedName]
		public CrossReference getElaboratesEventBNamedCommentedComponentElementCrossReference_2_1_0() { return cElaboratesEventBNamedCommentedComponentElementCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_2_1_0_1() { return cElaboratesEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_2_1_0_1; }
		
		//('refines' refines=[ediagrams::UMLB|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0() { return cRefinesKeyword_3_0; }
		
		//refines=[ediagrams::UMLB|QualifiedName]
		public Assignment getRefinesAssignment_3_1() { return cRefinesAssignment_3_1; }
		
		//[ediagrams::UMLB|QualifiedName]
		public CrossReference getRefinesUMLBCrossReference_3_1_0() { return cRefinesUMLBCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesUMLBQualifiedNameParserRuleCall_3_1_0_1() { return cRefinesUMLBQualifiedNameParserRuleCall_3_1_0_1; }
		
		//diagrams+=XDiagram*
		public Assignment getDiagramsAssignment_4() { return cDiagramsAssignment_4; }
		
		//XDiagram
		public RuleCall getDiagramsXDiagramParserRuleCall_4_0() { return cDiagramsXDiagramParserRuleCall_4_0; }
	}
	public class XDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XDiagram");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatemachineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassdiagramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XDiagram ediagrams::Diagram:
		//	Statemachine | Classdiagram;
		@Override public ParserRule getRule() { return rule; }
		
		//Statemachine | Classdiagram
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statemachine
		public RuleCall getStatemachineParserRuleCall_0() { return cStatemachineParserRuleCall_0; }
		
		//Classdiagram
		public RuleCall getClassdiagramParserRuleCall_1() { return cClassdiagramParserRuleCall_1; }
	}
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatemachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStatemachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTranslationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTranslationTranslationKindEnumRuleCall_4_0 = (RuleCall)cTranslationAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRefinesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRefinesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRefinesStatemachineCrossReference_6_1_0 = (CrossReference)cRefinesAssignment_6_1.eContents().get(0);
		private final RuleCall cRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cRefinesStatemachineCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInstancesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInstancesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cInstancesEventBNamedCommentedElementCrossReference_7_1_0 = (CrossReference)cInstancesAssignment_7_1.eContents().get(0);
		private final RuleCall cInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cInstancesEventBNamedCommentedElementCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSelfNameKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSelfNameAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSelfNameEStringParserRuleCall_7_3_0 = (RuleCall)cSelfNameAssignment_7_3.eContents().get(0);
		private final Assignment cNodesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNodesAbstractNodeParserRuleCall_8_0 = (RuleCall)cNodesAssignment_8.eContents().get(0);
		private final Assignment cTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTransitionsTransitionParserRuleCall_9_0 = (RuleCall)cTransitionsAssignment_9.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///********************************************
		// * Statemachine grammar
		// ********************************************/ Statemachine estatemachines::Statemachine:
		//	{estatemachines::Statemachine}
		//	'statemachine'
		//	name=ID '(' translation=TranslationKind ')' ('refines' refines=[estatemachines::Statemachine|QualifiedName])?
		//	('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
		//	'selfName' selfName=EString)?
		//	nodes+=AbstractNode*
		//	transitions+=Transition*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{estatemachines::Statemachine} 'statemachine' name=ID '(' translation=TranslationKind ')' ('refines'
		//refines=[estatemachines::Statemachine|QualifiedName])? ('instances'
		//instances=[eventbcore::EventBNamedCommentedElement|QualifiedName] 'selfName' selfName=EString)? nodes+=AbstractNode*
		//transitions+=Transition* 'end'
		public Group getGroup() { return cGroup; }
		
		//{estatemachines::Statemachine}
		public Action getStatemachineAction_0() { return cStatemachineAction_0; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_1() { return cStatemachineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//translation=TranslationKind
		public Assignment getTranslationAssignment_4() { return cTranslationAssignment_4; }
		
		//TranslationKind
		public RuleCall getTranslationTranslationKindEnumRuleCall_4_0() { return cTranslationTranslationKindEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('refines' refines=[estatemachines::Statemachine|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'refines'
		public Keyword getRefinesKeyword_6_0() { return cRefinesKeyword_6_0; }
		
		//refines=[estatemachines::Statemachine|QualifiedName]
		public Assignment getRefinesAssignment_6_1() { return cRefinesAssignment_6_1; }
		
		//[estatemachines::Statemachine|QualifiedName]
		public CrossReference getRefinesStatemachineCrossReference_6_1_0() { return cRefinesStatemachineCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1() { return cRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1; }
		
		//('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName] 'selfName' selfName=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'instances'
		public Keyword getInstancesKeyword_7_0() { return cInstancesKeyword_7_0; }
		
		//instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
		public Assignment getInstancesAssignment_7_1() { return cInstancesAssignment_7_1; }
		
		//[eventbcore::EventBNamedCommentedElement|QualifiedName]
		public CrossReference getInstancesEventBNamedCommentedElementCrossReference_7_1_0() { return cInstancesEventBNamedCommentedElementCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1() { return cInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1; }
		
		//'selfName'
		public Keyword getSelfNameKeyword_7_2() { return cSelfNameKeyword_7_2; }
		
		//selfName=EString
		public Assignment getSelfNameAssignment_7_3() { return cSelfNameAssignment_7_3; }
		
		//EString
		public RuleCall getSelfNameEStringParserRuleCall_7_3_0() { return cSelfNameEStringParserRuleCall_7_3_0; }
		
		//nodes+=AbstractNode*
		public Assignment getNodesAssignment_8() { return cNodesAssignment_8; }
		
		//AbstractNode
		public RuleCall getNodesAbstractNodeParserRuleCall_8_0() { return cNodesAbstractNodeParserRuleCall_8_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_9() { return cTransitionsAssignment_9; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_9_0() { return cTransitionsTransitionParserRuleCall_9_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class AbstractNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.AbstractNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFinalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForkParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AbstractNode estatemachines::AbstractNode:
		//	State | Initial | Final | Any | Junction | Fork;
		@Override public ParserRule getRule() { return rule; }
		
		//State | Initial | Final | Any | Junction | Fork
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_1() { return cInitialParserRuleCall_1; }
		
		//Final
		public RuleCall getFinalParserRuleCall_2() { return cFinalParserRuleCall_2; }
		
		//Any
		public RuleCall getAnyParserRuleCall_3() { return cAnyParserRuleCall_3; }
		
		//Junction
		public RuleCall getJunctionParserRuleCall_4() { return cJunctionParserRuleCall_4; }
		
		//Fork
		public RuleCall getForkParserRuleCall_5() { return cForkParserRuleCall_5; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElaboratesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElaboratesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cElaboratesEventCrossReference_2_1_0 = (CrossReference)cElaboratesAssignment_2_1.eContents().get(0);
		private final RuleCall cElaboratesEventQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cElaboratesEventCrossReference_2_1_0.eContents().get(1);
		private final Assignment cExtendedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cExtendedExtendedKeyword_3_0 = (Keyword)cExtendedAssignment_3.eContents().get(0);
		private final Keyword cSourceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceAbstractNodeCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourceAbstractNodeQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cSourceAbstractNodeCrossReference_5_0.eContents().get(1);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetAbstractNodeCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetAbstractNodeQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cTargetAbstractNodeCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAnyKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cParametersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_8_1_0 = (RuleCall)cParametersAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cParametersAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_8_2_1_0 = (RuleCall)cParametersAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWhereKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cGuardsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_9_1_0 = (RuleCall)cGuardsAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cThenKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cActionsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_10_1_0 = (RuleCall)cActionsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cWithKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cWitnessesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_11_1_0 = (RuleCall)cWitnessesAssignment_11_1.eContents().get(0);
		private final Keyword cEndKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Transition estatemachines::Transition:
		//	{estatemachines::Transition}
		//	'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		//	extended?='extended'?
		//	//		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//	'source' source=[estatemachines::AbstractNode|QualifiedName]
		//	'target' target=[estatemachines::AbstractNode|QualifiedName] ('any' parameters+=TypedParameter (','
		//	parameters+=TypedParameter)*)? ('where' guards+=Guard+)? ('then' actions+=Action+)? ('with' witnesses+=Witness+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{estatemachines::Transition} 'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		//extended?='extended'? //		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//'source' source=[estatemachines::AbstractNode|QualifiedName] 'target'
		//target=[estatemachines::AbstractNode|QualifiedName] ('any' parameters+=TypedParameter (','
		//parameters+=TypedParameter)*)? ('where' guards+=Guard+)? ('then' actions+=Action+)? ('with' witnesses+=Witness+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{estatemachines::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//'transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_2_0() { return cElaboratesKeyword_2_0; }
		
		//elaborates+=[emachine::Event|QualifiedName]+
		public Assignment getElaboratesAssignment_2_1() { return cElaboratesAssignment_2_1; }
		
		//[emachine::Event|QualifiedName]
		public CrossReference getElaboratesEventCrossReference_2_1_0() { return cElaboratesEventCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventQualifiedNameParserRuleCall_2_1_0_1() { return cElaboratesEventQualifiedNameParserRuleCall_2_1_0_1; }
		
		//extended?='extended'?
		public Assignment getExtendedAssignment_3() { return cExtendedAssignment_3; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_3_0() { return cExtendedExtendedKeyword_3_0; }
		
		////		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//'source'
		public Keyword getSourceKeyword_4() { return cSourceKeyword_4; }
		
		//source=[estatemachines::AbstractNode|QualifiedName]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[estatemachines::AbstractNode|QualifiedName]
		public CrossReference getSourceAbstractNodeCrossReference_5_0() { return cSourceAbstractNodeCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getSourceAbstractNodeQualifiedNameParserRuleCall_5_0_1() { return cSourceAbstractNodeQualifiedNameParserRuleCall_5_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//target=[estatemachines::AbstractNode|QualifiedName]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[estatemachines::AbstractNode|QualifiedName]
		public CrossReference getTargetAbstractNodeCrossReference_7_0() { return cTargetAbstractNodeCrossReference_7_0; }
		
		//QualifiedName
		public RuleCall getTargetAbstractNodeQualifiedNameParserRuleCall_7_0_1() { return cTargetAbstractNodeQualifiedNameParserRuleCall_7_0_1; }
		
		//('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'any'
		public Keyword getAnyKeyword_8_0() { return cAnyKeyword_8_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_8_1() { return cParametersAssignment_8_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_8_1_0() { return cParametersTypedParameterParserRuleCall_8_1_0; }
		
		//(',' parameters+=TypedParameter)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//','
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_8_2_1() { return cParametersAssignment_8_2_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_8_2_1_0() { return cParametersTypedParameterParserRuleCall_8_2_1_0; }
		
		//('where' guards+=Guard+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'where'
		public Keyword getWhereKeyword_9_0() { return cWhereKeyword_9_0; }
		
		//guards+=Guard+
		public Assignment getGuardsAssignment_9_1() { return cGuardsAssignment_9_1; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_9_1_0() { return cGuardsGuardParserRuleCall_9_1_0; }
		
		//('then' actions+=Action+)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'then'
		public Keyword getThenKeyword_10_0() { return cThenKeyword_10_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_10_1() { return cActionsAssignment_10_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_10_1_0() { return cActionsActionParserRuleCall_10_1_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'with'
		public Keyword getWithKeyword_11_0() { return cWithKeyword_11_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_11_1() { return cWitnessesAssignment_11_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_11_1_0() { return cWitnessesWitnessParserRuleCall_11_1_0; }
		
		//'end'
		public Keyword getEndKeyword_12() { return cEndKeyword_12; }
	}
	public class TypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.TypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeXTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypedParameter ecoreextension::TypedParameter:
		//	name=ID ':' type=XType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=XType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=XType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//XType
		public RuleCall getTypeXTypeParserRuleCall_2_0() { return cTypeXTypeParserRuleCall_2_0; }
	}
	public class XTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXComplexTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMultiplicationSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXComplexTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//XType:
		//	XComplexType ('×' XComplexType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XComplexType ('×' XComplexType)*
		public Group getGroup() { return cGroup; }
		
		//XComplexType
		public RuleCall getXComplexTypeParserRuleCall_0() { return cXComplexTypeParserRuleCall_0; }
		
		//('×' XComplexType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_1_0() { return cMultiplicationSignKeyword_1_0; }
		
		//XComplexType
		public RuleCall getXComplexTypeParserRuleCall_1_1() { return cXComplexTypeParserRuleCall_1_1; }
	}
	public class XComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDoubleStruckCapitalPKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cXTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cEVENT_B_BUILDIN_TYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XComplexType:
		//	'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ℙ' '(' XType ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_0_0() { return cDoubleStruckCapitalPKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//XType
		public RuleCall getXTypeParserRuleCall_0_2() { return cXTypeParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//EVENT_B_BUILDIN_TYPE
		public RuleCall getEVENT_B_BUILDIN_TYPEParserRuleCall_1() { return cEVENT_B_BUILDIN_TYPEParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class EVENT_B_BUILDIN_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EVENT_B_BUILDIN_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleStruckCapitalZKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EVENT_B_BUILDIN_TYPE:
		//	'BOOL' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_1() { return cDoubleStruckCapitalZKeyword_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefinesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefinesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefinesStateCrossReference_3_1_0 = (CrossReference)cRefinesAssignment_3_1.eContents().get(0);
		private final RuleCall cRefinesStateQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cRefinesStateCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatemachinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cBeginKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatemachinesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_4_2_0 = (RuleCall)cStatemachinesAssignment_4_2.eContents().get(0);
		private final Assignment cStatemachinesAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_4_3_0 = (RuleCall)cStatemachinesAssignment_4_3.eContents().get(0);
		private final Keyword cEndKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInvariantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInvariantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInvariantsInvariantParserRuleCall_5_1_0 = (RuleCall)cInvariantsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEntryActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEntryActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_6_1_0 = (RuleCall)cEntryActionsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cExitActionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExitActionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_7_1_0 = (RuleCall)cExitActionsAssignment_7_1.eContents().get(0);
		
		//State estatemachines::State:
		//	{estatemachines::State}
		//	'state'
		//	name=EString ('refines' refines=[estatemachines::State|QualifiedName])? ('statemachines' 'begin'
		//	statemachines+=Statemachine statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)?
		//	('entryActions' entryActions+=Action+)? ('exitActions' exitActions+=Action+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{estatemachines::State} 'state' name=EString ('refines' refines=[estatemachines::State|QualifiedName])? ('statemachines'
		//'begin' statemachines+=Statemachine statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)?
		//('entryActions' entryActions+=Action+)? ('exitActions' exitActions+=Action+)?
		public Group getGroup() { return cGroup; }
		
		//{estatemachines::State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('refines' refines=[estatemachines::State|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0() { return cRefinesKeyword_3_0; }
		
		//refines=[estatemachines::State|QualifiedName]
		public Assignment getRefinesAssignment_3_1() { return cRefinesAssignment_3_1; }
		
		//[estatemachines::State|QualifiedName]
		public CrossReference getRefinesStateCrossReference_3_1_0() { return cRefinesStateCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesStateQualifiedNameParserRuleCall_3_1_0_1() { return cRefinesStateQualifiedNameParserRuleCall_3_1_0_1; }
		
		//('statemachines' 'begin' statemachines+=Statemachine statemachines+=Statemachine* 'end')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'statemachines'
		public Keyword getStatemachinesKeyword_4_0() { return cStatemachinesKeyword_4_0; }
		
		//'begin'
		public Keyword getBeginKeyword_4_1() { return cBeginKeyword_4_1; }
		
		//statemachines+=Statemachine
		public Assignment getStatemachinesAssignment_4_2() { return cStatemachinesAssignment_4_2; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_4_2_0() { return cStatemachinesStatemachineParserRuleCall_4_2_0; }
		
		//statemachines+=Statemachine*
		public Assignment getStatemachinesAssignment_4_3() { return cStatemachinesAssignment_4_3; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_4_3_0() { return cStatemachinesStatemachineParserRuleCall_4_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4_4() { return cEndKeyword_4_4; }
		
		//('invariants' invariants+=Invariant+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_5_0() { return cInvariantsKeyword_5_0; }
		
		//invariants+=Invariant+
		public Assignment getInvariantsAssignment_5_1() { return cInvariantsAssignment_5_1; }
		
		//Invariant
		public RuleCall getInvariantsInvariantParserRuleCall_5_1_0() { return cInvariantsInvariantParserRuleCall_5_1_0; }
		
		//('entryActions' entryActions+=Action+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'entryActions'
		public Keyword getEntryActionsKeyword_6_0() { return cEntryActionsKeyword_6_0; }
		
		//entryActions+=Action+
		public Assignment getEntryActionsAssignment_6_1() { return cEntryActionsAssignment_6_1; }
		
		//Action
		public RuleCall getEntryActionsActionParserRuleCall_6_1_0() { return cEntryActionsActionParserRuleCall_6_1_0; }
		
		//('exitActions' exitActions+=Action+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'exitActions'
		public Keyword getExitActionsKeyword_7_0() { return cExitActionsKeyword_7_0; }
		
		//exitActions+=Action+
		public Assignment getExitActionsAssignment_7_1() { return cExitActionsAssignment_7_1; }
		
		//Action
		public RuleCall getExitActionsActionParserRuleCall_7_1_0() { return cExitActionsActionParserRuleCall_7_1_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Initial estatemachines::Initial:
		//	'initial' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'initial' name=EString
		public Group getGroup() { return cGroup; }
		
		//'initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Final");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Final estatemachines::Final:
		//	'final' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'final' name=EString
		public Group getGroup() { return cGroup; }
		
		//'final'
		public Keyword getFinalKeyword_0() { return cFinalKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Any");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Any estatemachines::Any:
		//	'any' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'any' name=EString
		public Group getGroup() { return cGroup; }
		
		//'any'
		public Keyword getAnyKeyword_0() { return cAnyKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Junction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Junction estatemachines::Junction:
		//	'junction' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'junction' name=EString
		public Group getGroup() { return cGroup; }
		
		//'junction'
		public Keyword getJunctionKeyword_0() { return cJunctionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Fork estatemachines::Fork:
		//	'fork' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'fork' name=EString
		public Group getGroup() { return cGroup; }
		
		//'fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ClassdiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Classdiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassdiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassdiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRefinesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefinesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefinesClassdiagramCrossReference_3_1_0 = (CrossReference)cRefinesAssignment_3_1.eContents().get(0);
		private final RuleCall cRefinesClassdiagramQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cRefinesClassdiagramCrossReference_3_1_0.eContents().get(1);
		private final Assignment cClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassesClassParserRuleCall_4_0 = (RuleCall)cClassesAssignment_4.eContents().get(0);
		private final Assignment cAssociationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssociationsAssociationParserRuleCall_5_0 = (RuleCall)cAssociationsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*********************************************
		// * Class Diagram Grammar
		// ********************************************/ Classdiagram eclassdiagrams::Classdiagram:
		//	{eclassdiagrams::Classdiagram}
		//	'classdiagram'
		//	name=ID ('refines' refines=[eclassdiagrams::Classdiagram|QualifiedName])?
		//	//		('classes' classes+=Class+)? 
		//	classes+=Class* associations+=Association* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::Classdiagram} 'classdiagram' name=ID ('refines' refines=[eclassdiagrams::Classdiagram|QualifiedName])? //		('classes' classes+=Class+)? 
		//classes+=Class* associations+=Association* 'end'
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::Classdiagram}
		public Action getClassdiagramAction_0() { return cClassdiagramAction_0; }
		
		//'classdiagram'
		public Keyword getClassdiagramKeyword_1() { return cClassdiagramKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('refines' refines=[eclassdiagrams::Classdiagram|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0() { return cRefinesKeyword_3_0; }
		
		//refines=[eclassdiagrams::Classdiagram|QualifiedName]
		public Assignment getRefinesAssignment_3_1() { return cRefinesAssignment_3_1; }
		
		//[eclassdiagrams::Classdiagram|QualifiedName]
		public CrossReference getRefinesClassdiagramCrossReference_3_1_0() { return cRefinesClassdiagramCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesClassdiagramQualifiedNameParserRuleCall_3_1_0_1() { return cRefinesClassdiagramQualifiedNameParserRuleCall_3_1_0_1; }
		
		////		('classes' classes+=Class+)? 
		//classes+=Class*
		public Assignment getClassesAssignment_4() { return cClassesAssignment_4; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_4_0() { return cClassesClassParserRuleCall_4_0; }
		
		//associations+=Association*
		public Assignment getAssociationsAssignment_5() { return cAssociationsAssignment_5; }
		
		//Association
		public RuleCall getAssociationsAssociationParserRuleCall_5_0() { return cAssociationsAssociationParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class EventBSuperTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EventBSuperType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubtypeGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventBSuperType eclassdiagrams::EventBSuperType:
		//	Class | SubtypeGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | SubtypeGroup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//SubtypeGroup
		public RuleCall getSubtypeGroupParserRuleCall_1() { return cSubtypeGroupParserRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataKindDataKindEnumRuleCall_4_0 = (RuleCall)cDataKindAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElaboratesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElaboratesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cElaboratesEventBNamedCrossReference_6_1_0 = (CrossReference)cElaboratesAssignment_6_1.eContents().get(0);
		private final RuleCall cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cElaboratesEventBNamedCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSelfNameKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSelfNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSelfNameEStringParserRuleCall_7_1_0 = (RuleCall)cSelfNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInstancesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInstancesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInstancesEStringParserRuleCall_8_1_0 = (RuleCall)cInstancesAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cSupertypesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cSupertypesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cSupertypesEventBSuperTypeCrossReference_9_1_0 = (CrossReference)cSupertypesAssignment_9_1.eContents().get(0);
		private final RuleCall cSupertypesEventBSuperTypeIDTerminalRuleCall_9_1_0_1 = (RuleCall)cSupertypesEventBSuperTypeCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cRefinesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cRefinesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cRefinesClassCrossReference_10_1_0 = (CrossReference)cRefinesAssignment_10_1.eContents().get(0);
		private final RuleCall cRefinesClassQualifiedNameParserRuleCall_10_1_0_1 = (RuleCall)cRefinesClassCrossReference_10_1_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cStatemachinesKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cBeginKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cStatemachinesAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_11_2_0 = (RuleCall)cStatemachinesAssignment_11_2.eContents().get(0);
		private final Keyword cEndKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Assignment cClassAttributesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cClassAttributesClassAttributeParserRuleCall_12_0 = (RuleCall)cClassAttributesAssignment_12.eContents().get(0);
		private final Assignment cConstraintsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cConstraintsClassConstraintParserRuleCall_13_0 = (RuleCall)cConstraintsAssignment_13.eContents().get(0);
		private final Assignment cMethodsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cMethodsClassMethodParserRuleCall_14_0 = (RuleCall)cMethodsAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cSubtypeGroupsKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cSubtypeGroupsAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cSubtypeGroupsSubtypeGroupParserRuleCall_15_1_0 = (RuleCall)cSubtypeGroupsAssignment_15_1.eContents().get(0);
		
		//Class eclassdiagrams::Class:
		//	{eclassdiagrams::Class}
		//	'class'
		//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])? ('selfName'
		//	selfName=EString)? ('instances' instances=EString)? ('supertypes' supertypes+=[eclassdiagrams::EventBSuperType]+)?
		//	('refines' refines=[eclassdiagrams::Class|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine+
		//	'end')?
		//	classAttributes+=ClassAttribute* constraints+=ClassConstraint* methods+=ClassMethod* ('subtypeGroups'
		//	subtypeGroups+=SubtypeGroup+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::Class} 'class' name=ID '(' dataKind=DataKind ')' ('elaborates'
		//elaborates=[eventbcore::EventBNamed|QualifiedName])? ('selfName' selfName=EString)? ('instances' instances=EString)?
		//('supertypes' supertypes+=[eclassdiagrams::EventBSuperType]+)? ('refines'
		//refines=[eclassdiagrams::Class|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine+ 'end')?
		//classAttributes+=ClassAttribute* constraints+=ClassConstraint* methods+=ClassMethod* ('subtypeGroups'
		//subtypeGroups+=SubtypeGroup+)?
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::Class}
		public Action getClassAction_0() { return cClassAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//dataKind=DataKind
		public Assignment getDataKindAssignment_4() { return cDataKindAssignment_4; }
		
		//DataKind
		public RuleCall getDataKindDataKindEnumRuleCall_4_0() { return cDataKindDataKindEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_6_0() { return cElaboratesKeyword_6_0; }
		
		//elaborates=[eventbcore::EventBNamed|QualifiedName]
		public Assignment getElaboratesAssignment_6_1() { return cElaboratesAssignment_6_1; }
		
		//[eventbcore::EventBNamed|QualifiedName]
		public CrossReference getElaboratesEventBNamedCrossReference_6_1_0() { return cElaboratesEventBNamedCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1() { return cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1; }
		
		//('selfName' selfName=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'selfName'
		public Keyword getSelfNameKeyword_7_0() { return cSelfNameKeyword_7_0; }
		
		//selfName=EString
		public Assignment getSelfNameAssignment_7_1() { return cSelfNameAssignment_7_1; }
		
		//EString
		public RuleCall getSelfNameEStringParserRuleCall_7_1_0() { return cSelfNameEStringParserRuleCall_7_1_0; }
		
		//('instances' instances=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'instances'
		public Keyword getInstancesKeyword_8_0() { return cInstancesKeyword_8_0; }
		
		//instances=EString
		public Assignment getInstancesAssignment_8_1() { return cInstancesAssignment_8_1; }
		
		//EString
		public RuleCall getInstancesEStringParserRuleCall_8_1_0() { return cInstancesEStringParserRuleCall_8_1_0; }
		
		//('supertypes' supertypes+=[eclassdiagrams::EventBSuperType]+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'supertypes'
		public Keyword getSupertypesKeyword_9_0() { return cSupertypesKeyword_9_0; }
		
		//supertypes+=[eclassdiagrams::EventBSuperType]+
		public Assignment getSupertypesAssignment_9_1() { return cSupertypesAssignment_9_1; }
		
		//[eclassdiagrams::EventBSuperType]
		public CrossReference getSupertypesEventBSuperTypeCrossReference_9_1_0() { return cSupertypesEventBSuperTypeCrossReference_9_1_0; }
		
		//ID
		public RuleCall getSupertypesEventBSuperTypeIDTerminalRuleCall_9_1_0_1() { return cSupertypesEventBSuperTypeIDTerminalRuleCall_9_1_0_1; }
		
		//('refines' refines=[eclassdiagrams::Class|QualifiedName])?
		public Group getGroup_10() { return cGroup_10; }
		
		//'refines'
		public Keyword getRefinesKeyword_10_0() { return cRefinesKeyword_10_0; }
		
		//refines=[eclassdiagrams::Class|QualifiedName]
		public Assignment getRefinesAssignment_10_1() { return cRefinesAssignment_10_1; }
		
		//[eclassdiagrams::Class|QualifiedName]
		public CrossReference getRefinesClassCrossReference_10_1_0() { return cRefinesClassCrossReference_10_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesClassQualifiedNameParserRuleCall_10_1_0_1() { return cRefinesClassQualifiedNameParserRuleCall_10_1_0_1; }
		
		//('statemachines' 'begin' statemachines+=Statemachine+ 'end')?
		public Group getGroup_11() { return cGroup_11; }
		
		//'statemachines'
		public Keyword getStatemachinesKeyword_11_0() { return cStatemachinesKeyword_11_0; }
		
		//'begin'
		public Keyword getBeginKeyword_11_1() { return cBeginKeyword_11_1; }
		
		//statemachines+=Statemachine+
		public Assignment getStatemachinesAssignment_11_2() { return cStatemachinesAssignment_11_2; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_11_2_0() { return cStatemachinesStatemachineParserRuleCall_11_2_0; }
		
		//'end'
		public Keyword getEndKeyword_11_3() { return cEndKeyword_11_3; }
		
		//classAttributes+=ClassAttribute*
		public Assignment getClassAttributesAssignment_12() { return cClassAttributesAssignment_12; }
		
		//ClassAttribute
		public RuleCall getClassAttributesClassAttributeParserRuleCall_12_0() { return cClassAttributesClassAttributeParserRuleCall_12_0; }
		
		//constraints+=ClassConstraint*
		public Assignment getConstraintsAssignment_13() { return cConstraintsAssignment_13; }
		
		//ClassConstraint
		public RuleCall getConstraintsClassConstraintParserRuleCall_13_0() { return cConstraintsClassConstraintParserRuleCall_13_0; }
		
		//methods+=ClassMethod*
		public Assignment getMethodsAssignment_14() { return cMethodsAssignment_14; }
		
		//ClassMethod
		public RuleCall getMethodsClassMethodParserRuleCall_14_0() { return cMethodsClassMethodParserRuleCall_14_0; }
		
		//('subtypeGroups' subtypeGroups+=SubtypeGroup+)?
		public Group getGroup_15() { return cGroup_15; }
		
		//'subtypeGroups'
		public Keyword getSubtypeGroupsKeyword_15_0() { return cSubtypeGroupsKeyword_15_0; }
		
		//subtypeGroups+=SubtypeGroup+
		public Assignment getSubtypeGroupsAssignment_15_1() { return cSubtypeGroupsAssignment_15_1; }
		
		//SubtypeGroup
		public RuleCall getSubtypeGroupsSubtypeGroupParserRuleCall_15_1_0() { return cSubtypeGroupsSubtypeGroupParserRuleCall_15_1_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataKindDataKindEnumRuleCall_4_0 = (RuleCall)cDataKindAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElaboratesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElaboratesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cElaboratesEventBNamedCrossReference_6_1_0 = (CrossReference)cElaboratesAssignment_6_1.eContents().get(0);
		private final RuleCall cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cElaboratesEventBNamedCrossReference_6_1_0.eContents().get(1);
		private final Assignment cFunctionalAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cFunctionalFunctionalKeyword_7_0 = (Keyword)cFunctionalAssignment_7.eContents().get(0);
		private final Assignment cTotalAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cTotalTotalKeyword_8_0 = (Keyword)cTotalAssignment_8.eContents().get(0);
		private final Assignment cSurjectiveAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cSurjectiveSurjectiveKeyword_9_0 = (Keyword)cSurjectiveAssignment_9.eContents().get(0);
		private final Assignment cInjectiveAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cInjectiveInjectiveKeyword_10_0 = (Keyword)cInjectiveAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cInitialValueKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cInitialValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cInitialValueEStringParserRuleCall_11_1_0 = (RuleCall)cInitialValueAssignment_11_1.eContents().get(0);
		private final Keyword cSourceKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cSourceAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final CrossReference cSourceClassCrossReference_13_0 = (CrossReference)cSourceAssignment_13.eContents().get(0);
		private final RuleCall cSourceClassQualifiedNameParserRuleCall_13_0_1 = (RuleCall)cSourceClassCrossReference_13_0.eContents().get(1);
		private final Keyword cTargetKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cTargetAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final CrossReference cTargetClassCrossReference_15_0 = (CrossReference)cTargetAssignment_15.eContents().get(0);
		private final RuleCall cTargetClassQualifiedNameParserRuleCall_15_0_1 = (RuleCall)cTargetClassCrossReference_15_0.eContents().get(1);
		
		//Association eclassdiagrams::Association:
		//	{eclassdiagrams::Association}
		//	'association'
		//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
		//	functional?='functional'?
		//	total?='total'?
		//	surjective?='surjective'?
		//	injective?='injective'? ('initialValue' initialValue=EString)?
		//	'source' source=[eclassdiagrams::Class|QualifiedName]
		//	'target' target=[eclassdiagrams::Class|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::Association} 'association' name=ID '(' dataKind=DataKind ')' ('elaborates'
		//elaborates=[eventbcore::EventBNamed|QualifiedName])? functional?='functional'? total?='total'?
		//surjective?='surjective'? injective?='injective'? ('initialValue' initialValue=EString)? 'source'
		//source=[eclassdiagrams::Class|QualifiedName] 'target' target=[eclassdiagrams::Class|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::Association}
		public Action getAssociationAction_0() { return cAssociationAction_0; }
		
		//'association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//dataKind=DataKind
		public Assignment getDataKindAssignment_4() { return cDataKindAssignment_4; }
		
		//DataKind
		public RuleCall getDataKindDataKindEnumRuleCall_4_0() { return cDataKindDataKindEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_6_0() { return cElaboratesKeyword_6_0; }
		
		//elaborates=[eventbcore::EventBNamed|QualifiedName]
		public Assignment getElaboratesAssignment_6_1() { return cElaboratesAssignment_6_1; }
		
		//[eventbcore::EventBNamed|QualifiedName]
		public CrossReference getElaboratesEventBNamedCrossReference_6_1_0() { return cElaboratesEventBNamedCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1() { return cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1; }
		
		//functional?='functional'?
		public Assignment getFunctionalAssignment_7() { return cFunctionalAssignment_7; }
		
		//'functional'
		public Keyword getFunctionalFunctionalKeyword_7_0() { return cFunctionalFunctionalKeyword_7_0; }
		
		//total?='total'?
		public Assignment getTotalAssignment_8() { return cTotalAssignment_8; }
		
		//'total'
		public Keyword getTotalTotalKeyword_8_0() { return cTotalTotalKeyword_8_0; }
		
		//surjective?='surjective'?
		public Assignment getSurjectiveAssignment_9() { return cSurjectiveAssignment_9; }
		
		//'surjective'
		public Keyword getSurjectiveSurjectiveKeyword_9_0() { return cSurjectiveSurjectiveKeyword_9_0; }
		
		//injective?='injective'?
		public Assignment getInjectiveAssignment_10() { return cInjectiveAssignment_10; }
		
		//'injective'
		public Keyword getInjectiveInjectiveKeyword_10_0() { return cInjectiveInjectiveKeyword_10_0; }
		
		//('initialValue' initialValue=EString)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'initialValue'
		public Keyword getInitialValueKeyword_11_0() { return cInitialValueKeyword_11_0; }
		
		//initialValue=EString
		public Assignment getInitialValueAssignment_11_1() { return cInitialValueAssignment_11_1; }
		
		//EString
		public RuleCall getInitialValueEStringParserRuleCall_11_1_0() { return cInitialValueEStringParserRuleCall_11_1_0; }
		
		//'source'
		public Keyword getSourceKeyword_12() { return cSourceKeyword_12; }
		
		//source=[eclassdiagrams::Class|QualifiedName]
		public Assignment getSourceAssignment_13() { return cSourceAssignment_13; }
		
		//[eclassdiagrams::Class|QualifiedName]
		public CrossReference getSourceClassCrossReference_13_0() { return cSourceClassCrossReference_13_0; }
		
		//QualifiedName
		public RuleCall getSourceClassQualifiedNameParserRuleCall_13_0_1() { return cSourceClassQualifiedNameParserRuleCall_13_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_14() { return cTargetKeyword_14; }
		
		//target=[eclassdiagrams::Class|QualifiedName]
		public Assignment getTargetAssignment_15() { return cTargetAssignment_15; }
		
		//[eclassdiagrams::Class|QualifiedName]
		public CrossReference getTargetClassCrossReference_15_0() { return cTargetClassCrossReference_15_0; }
		
		//QualifiedName
		public RuleCall getTargetClassQualifiedNameParserRuleCall_15_0_1() { return cTargetClassQualifiedNameParserRuleCall_15_0_1; }
	}
	public class SubtypeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.SubtypeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubtypeGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubtypeGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCoverAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cCoverCoverKeyword_3_0 = (Keyword)cCoverAssignment_3.eContents().get(0);
		private final Assignment cDisjointAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cDisjointDisjointKeyword_4_0 = (Keyword)cDisjointAssignment_4.eContents().get(0);
		
		//SubtypeGroup eclassdiagrams::SubtypeGroup:
		//	{eclassdiagrams::SubtypeGroup}
		//	'SubtypeGroup'
		//	name=ID
		//	cover?='cover'?
		//	disjoint?='disjoint'?
		//	//		('subtypes' subtypes += [eclassdiagrams::Class|QualifiedName]+)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::SubtypeGroup} 'SubtypeGroup' name=ID cover?='cover'? disjoint?='disjoint'?
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::SubtypeGroup}
		public Action getSubtypeGroupAction_0() { return cSubtypeGroupAction_0; }
		
		//'SubtypeGroup'
		public Keyword getSubtypeGroupKeyword_1() { return cSubtypeGroupKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//cover?='cover'?
		public Assignment getCoverAssignment_3() { return cCoverAssignment_3; }
		
		//'cover'
		public Keyword getCoverCoverKeyword_3_0() { return cCoverCoverKeyword_3_0; }
		
		//disjoint?='disjoint'?
		public Assignment getDisjointAssignment_4() { return cDisjointAssignment_4; }
		
		//'disjoint'
		public Keyword getDisjointDisjointKeyword_4_0() { return cDisjointDisjointKeyword_4_0; }
	}
	public class ClassAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.ClassAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataKindDataKindEnumRuleCall_4_0 = (RuleCall)cDataKindAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElaboratesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElaboratesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cElaboratesEventBNamedCrossReference_6_1_0 = (CrossReference)cElaboratesAssignment_6_1.eContents().get(0);
		private final RuleCall cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cElaboratesEventBNamedCrossReference_6_1_0.eContents().get(1);
		private final Assignment cFunctionalAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cFunctionalFunctionalKeyword_7_0 = (Keyword)cFunctionalAssignment_7.eContents().get(0);
		private final Assignment cTotalAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cTotalTotalKeyword_8_0 = (Keyword)cTotalAssignment_8.eContents().get(0);
		private final Assignment cSurjectiveAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Keyword cSurjectiveSurjectiveKeyword_9_0 = (Keyword)cSurjectiveAssignment_9.eContents().get(0);
		private final Assignment cInjectiveAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cInjectiveInjectiveKeyword_10_0 = (Keyword)cInjectiveAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cInitialValueKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cInitialValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cInitialValueEStringParserRuleCall_11_1_0 = (RuleCall)cInitialValueAssignment_11_1.eContents().get(0);
		private final Keyword cTargetKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cTargetAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTargetEStringParserRuleCall_13_0 = (RuleCall)cTargetAssignment_13.eContents().get(0);
		
		//ClassAttribute eclassdiagrams::ClassAttribute:
		//	{eclassdiagrams::ClassAttribute}
		//	'attribute'
		//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
		//	functional?='functional'?
		//	total?='total'?
		//	surjective?='surjective'?
		//	injective?='injective'? ('initialValue' initialValue=EString)?
		//	'target' target=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::ClassAttribute} 'attribute' name=ID '(' dataKind=DataKind ')' ('elaborates'
		//elaborates=[eventbcore::EventBNamed|QualifiedName])? functional?='functional'? total?='total'?
		//surjective?='surjective'? injective?='injective'? ('initialValue' initialValue=EString)? 'target' target=EString
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::ClassAttribute}
		public Action getClassAttributeAction_0() { return cClassAttributeAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//dataKind=DataKind
		public Assignment getDataKindAssignment_4() { return cDataKindAssignment_4; }
		
		//DataKind
		public RuleCall getDataKindDataKindEnumRuleCall_4_0() { return cDataKindDataKindEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_6_0() { return cElaboratesKeyword_6_0; }
		
		//elaborates=[eventbcore::EventBNamed|QualifiedName]
		public Assignment getElaboratesAssignment_6_1() { return cElaboratesAssignment_6_1; }
		
		//[eventbcore::EventBNamed|QualifiedName]
		public CrossReference getElaboratesEventBNamedCrossReference_6_1_0() { return cElaboratesEventBNamedCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1() { return cElaboratesEventBNamedQualifiedNameParserRuleCall_6_1_0_1; }
		
		//functional?='functional'?
		public Assignment getFunctionalAssignment_7() { return cFunctionalAssignment_7; }
		
		//'functional'
		public Keyword getFunctionalFunctionalKeyword_7_0() { return cFunctionalFunctionalKeyword_7_0; }
		
		//total?='total'?
		public Assignment getTotalAssignment_8() { return cTotalAssignment_8; }
		
		//'total'
		public Keyword getTotalTotalKeyword_8_0() { return cTotalTotalKeyword_8_0; }
		
		//surjective?='surjective'?
		public Assignment getSurjectiveAssignment_9() { return cSurjectiveAssignment_9; }
		
		//'surjective'
		public Keyword getSurjectiveSurjectiveKeyword_9_0() { return cSurjectiveSurjectiveKeyword_9_0; }
		
		//injective?='injective'?
		public Assignment getInjectiveAssignment_10() { return cInjectiveAssignment_10; }
		
		//'injective'
		public Keyword getInjectiveInjectiveKeyword_10_0() { return cInjectiveInjectiveKeyword_10_0; }
		
		//('initialValue' initialValue=EString)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'initialValue'
		public Keyword getInitialValueKeyword_11_0() { return cInitialValueKeyword_11_0; }
		
		//initialValue=EString
		public Assignment getInitialValueAssignment_11_1() { return cInitialValueAssignment_11_1; }
		
		//EString
		public RuleCall getInitialValueEStringParserRuleCall_11_1_0() { return cInitialValueEStringParserRuleCall_11_1_0; }
		
		//'target'
		public Keyword getTargetKeyword_12() { return cTargetKeyword_12; }
		
		//target=EString
		public Assignment getTargetAssignment_13() { return cTargetAssignment_13; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_13_0() { return cTargetEStringParserRuleCall_13_0; }
	}
	public class ClassConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.ClassConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTheoremAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cTheoremTheoremKeyword_2_0 = (Keyword)cTheoremAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateXFormulaParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Keyword cComponentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComponentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cComponentEventBNamedCommentedComponentElementCrossReference_6_0 = (CrossReference)cComponentAssignment_6.eContents().get(0);
		private final RuleCall cComponentEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cComponentEventBNamedCommentedComponentElementCrossReference_6_0.eContents().get(1);
		
		//ClassConstraint eclassdiagrams::ClassConstraint:
		//	{eclassdiagrams::ClassConstraint}
		//	'constraint'
		//	theorem?='theorem'? name=ID //maybe XLabel instead of ID
		//	predicate=XFormula
		//	'component' component=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::ClassConstraint} 'constraint' theorem?='theorem'? name=ID //maybe XLabel instead of ID
		//predicate=XFormula 'component' component=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::ClassConstraint}
		public Action getClassConstraintAction_0() { return cClassConstraintAction_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_2() { return cTheoremAssignment_2; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_2_0() { return cTheoremTheoremKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		////maybe XLabel instead of ID
		//predicate=XFormula
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_4_0() { return cPredicateXFormulaParserRuleCall_4_0; }
		
		//'component'
		public Keyword getComponentKeyword_5() { return cComponentKeyword_5; }
		
		//component=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName]
		public Assignment getComponentAssignment_6() { return cComponentAssignment_6; }
		
		//[eventbcore::EventBNamedCommentedComponentElement|QualifiedName]
		public CrossReference getComponentEventBNamedCommentedComponentElementCrossReference_6_0() { return cComponentEventBNamedCommentedComponentElementCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getComponentEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_6_0_1() { return cComponentEventBNamedCommentedComponentElementQualifiedNameParserRuleCall_6_0_1; }
	}
	public class ClassMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.ClassMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cKindKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKindMethodKindEnumRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElaboratesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElaboratesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cElaboratesEventCrossReference_4_1_0 = (CrossReference)cElaboratesAssignment_4_1.eContents().get(0);
		private final RuleCall cElaboratesEventQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cElaboratesEventCrossReference_4_1_0.eContents().get(1);
		private final Assignment cExtendedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cExtendedExtendedKeyword_5_0 = (Keyword)cExtendedAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAnyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_6_2_1_0 = (RuleCall)cParametersAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_7_1_0 = (RuleCall)cGuardsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cThenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cActionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_8_1_0 = (RuleCall)cActionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cWitnessesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_9_1_0 = (RuleCall)cWitnessesAssignment_9_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ClassMethod eclassdiagrams::ClassMethod:
		//	{eclassdiagrams::ClassMethod}
		//	'method' // How to reference the event
		//	'kind' kind=MethodKind ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		//	extended?='extended'? ('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)? ('where' guards+=Guard+)?
		//	('then' actions+=Action+)? ('with' witnesses+=Witness+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{eclassdiagrams::ClassMethod} 'method' // How to reference the event
		//'kind' kind=MethodKind ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)? extended?='extended'? ('any'
		//parameters+=TypedParameter (',' parameters+=TypedParameter)*)? ('where' guards+=Guard+)? ('then' actions+=Action+)?
		//('with' witnesses+=Witness+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{eclassdiagrams::ClassMethod}
		public Action getClassMethodAction_0() { return cClassMethodAction_0; }
		
		//'method'
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }
		
		//// How to reference the event
		//'kind'
		public Keyword getKindKeyword_2() { return cKindKeyword_2; }
		
		//kind=MethodKind
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//MethodKind
		public RuleCall getKindMethodKindEnumRuleCall_3_0() { return cKindMethodKindEnumRuleCall_3_0; }
		
		//('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_4_0() { return cElaboratesKeyword_4_0; }
		
		//elaborates+=[emachine::Event|QualifiedName]+
		public Assignment getElaboratesAssignment_4_1() { return cElaboratesAssignment_4_1; }
		
		//[emachine::Event|QualifiedName]
		public CrossReference getElaboratesEventCrossReference_4_1_0() { return cElaboratesEventCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventQualifiedNameParserRuleCall_4_1_0_1() { return cElaboratesEventQualifiedNameParserRuleCall_4_1_0_1; }
		
		//extended?='extended'?
		public Assignment getExtendedAssignment_5() { return cExtendedAssignment_5; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_5_0() { return cExtendedExtendedKeyword_5_0; }
		
		//('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'any'
		public Keyword getAnyKeyword_6_0() { return cAnyKeyword_6_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_6_1_0() { return cParametersTypedParameterParserRuleCall_6_1_0; }
		
		//(',' parameters+=TypedParameter)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_6_2_1() { return cParametersAssignment_6_2_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_6_2_1_0() { return cParametersTypedParameterParserRuleCall_6_2_1_0; }
		
		//('where' guards+=Guard+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }
		
		//guards+=Guard+
		public Assignment getGuardsAssignment_7_1() { return cGuardsAssignment_7_1; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_7_1_0() { return cGuardsGuardParserRuleCall_7_1_0; }
		
		//('then' actions+=Action+)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'then'
		public Keyword getThenKeyword_8_0() { return cThenKeyword_8_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_8_1() { return cActionsAssignment_8_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_8_1_0() { return cActionsActionParserRuleCall_8_1_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'with'
		public Keyword getWithKeyword_9_0() { return cWithKeyword_9_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_9_1() { return cWitnessesAssignment_9_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_9_1_0() { return cWitnessesWitnessParserRuleCall_9_1_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*********************************************
		// * Generic grammar
		// ********************************************/ EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XFormula:
		//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVENTB_IDENTIFIER_KEYWORD
		public RuleCall getEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0() { return cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0; }
		
		//EVENTB_PREDICATE_SYMBOLS
		public RuleCall getEVENTB_PREDICATE_SYMBOLSParserRuleCall_1() { return cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1; }
		
		//EVENTB_EXPRESSION_SYMBOLS
		public RuleCall getEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2() { return cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class EVENTB_IDENTIFIER_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EVENTB_IDENTIFIER_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCardKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFiniteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInterKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMinKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cModKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPredKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrj1Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPrj2Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRanKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSuccKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUnionKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cDoubleStruckCapitalNDigitOneKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cDoubleStruckCapitalNKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cDoubleStruckCapitalPDigitOneKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cDoubleStruckCapitalPKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cDoubleStruckCapitalZKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		
		//EVENTB_IDENTIFIER_KEYWORD:
		//	'BOOL' |
		//	'FALSE' |
		//	'TRUE' |
		//	'bool' |
		//	'card' |
		//	'dom' |
		//	'finite' |
		//	'id' |
		//	'inter' |
		//	'max' |
		//	'min' |
		//	'mod' |
		//	'pred' |
		//	'prj1' |
		//	'prj2' |
		//	'ran' |
		//	'succ' |
		//	'union' |
		//	'ℕ1' |
		//	'ℕ' |
		//	'ℙ1' |
		//	'ℙ' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'FALSE' | 'TRUE' | 'bool' | 'card' | 'dom' | 'finite' | 'id' | 'inter' | 'max' | 'min' | 'mod' | 'pred' |
		//'prj1' | 'prj2' | 'ran' | 'succ' | 'union' | 'ℕ1' | 'ℕ' | 'ℙ1' | 'ℙ' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'bool'
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }
		
		//'card'
		public Keyword getCardKeyword_4() { return cCardKeyword_4; }
		
		//'dom'
		public Keyword getDomKeyword_5() { return cDomKeyword_5; }
		
		//'finite'
		public Keyword getFiniteKeyword_6() { return cFiniteKeyword_6; }
		
		//'id'
		public Keyword getIdKeyword_7() { return cIdKeyword_7; }
		
		//'inter'
		public Keyword getInterKeyword_8() { return cInterKeyword_8; }
		
		//'max'
		public Keyword getMaxKeyword_9() { return cMaxKeyword_9; }
		
		//'min'
		public Keyword getMinKeyword_10() { return cMinKeyword_10; }
		
		//'mod'
		public Keyword getModKeyword_11() { return cModKeyword_11; }
		
		//'pred'
		public Keyword getPredKeyword_12() { return cPredKeyword_12; }
		
		//'prj1'
		public Keyword getPrj1Keyword_13() { return cPrj1Keyword_13; }
		
		//'prj2'
		public Keyword getPrj2Keyword_14() { return cPrj2Keyword_14; }
		
		//'ran'
		public Keyword getRanKeyword_15() { return cRanKeyword_15; }
		
		//'succ'
		public Keyword getSuccKeyword_16() { return cSuccKeyword_16; }
		
		//'union'
		public Keyword getUnionKeyword_17() { return cUnionKeyword_17; }
		
		//'ℕ1'
		public Keyword getDoubleStruckCapitalNDigitOneKeyword_18() { return cDoubleStruckCapitalNDigitOneKeyword_18; }
		
		//'ℕ'
		public Keyword getDoubleStruckCapitalNKeyword_19() { return cDoubleStruckCapitalNKeyword_19; }
		
		//'ℙ1'
		public Keyword getDoubleStruckCapitalPDigitOneKeyword_20() { return cDoubleStruckCapitalPDigitOneKeyword_20; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_21() { return cDoubleStruckCapitalPKeyword_21; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_22() { return cDoubleStruckCapitalZKeyword_22; }
	}
	public class EVENTB_PREDICATE_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EVENTB_PREDICATE_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftRightDoubleArrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightwardsDoubleArrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogicalAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLogicalOrKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDownTackKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUpTackKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cForAllKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cThereExistsKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNumberSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMiddleDotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFullStopKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cNotEqualToKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLessThanOrEqualToKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cLessThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanOrEqualToKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cElementOfKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cColonKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cNotAnElementOfKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSubsetOfKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cNotASubsetOfKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cSubsetOfOrEqualToKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cNeitherASubsetOfNorEqualToKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPartitionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		
		//EVENTB_PREDICATE_SYMBOLS:
		//	'(' | // Predicate calculus symbols
		//	')' |
		//	'⇔' |
		//	'⇒' |
		//	'∧' | '&' |
		//	'∨' |
		//	'¬' |
		//	'⊤' |
		//	'⊥' |
		//	'∀' | '!' |
		//	'∃' | '#' |
		//	',' |
		//	'·' | '.' |
		//	'=' | // Build predicates from expressions
		//	'≠' |
		//	'≤' |
		//	'<' |
		//	'≥' |
		//	'>' |
		//	'∈' | ':' | // Include this for Rodin keyboard
		//	'∉' |
		//	'⊂' |
		//	'⊄' |
		//	'⊆' |
		//	'⊈' |
		//	'partition' // This is missing from the Rodin D7 deliverable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' | // Predicate calculus symbols
		//')' | '⇔' | '⇒' | '∧' | '&' | '∨' | '¬' | '⊤' | '⊥' | '∀' | '!' | '∃' | '#' | ',' | '·' | '.' | '=' | // Build predicates from expressions
		//'≠' | '≤' | '<' | '≥' | '>' | '∈' | ':' | // Include this for Rodin keyboard
		//'∉' | '⊂' | '⊄' | '⊆' | '⊈' | 'partition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//// Predicate calculus symbols
		//')'
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
		
		//'⇔'
		public Keyword getLeftRightDoubleArrowKeyword_2() { return cLeftRightDoubleArrowKeyword_2; }
		
		//'⇒'
		public Keyword getRightwardsDoubleArrowKeyword_3() { return cRightwardsDoubleArrowKeyword_3; }
		
		//'∧'
		public Keyword getLogicalAndKeyword_4() { return cLogicalAndKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'∨'
		public Keyword getLogicalOrKeyword_6() { return cLogicalOrKeyword_6; }
		
		//'¬'
		public Keyword getNotSignKeyword_7() { return cNotSignKeyword_7; }
		
		//'⊤'
		public Keyword getDownTackKeyword_8() { return cDownTackKeyword_8; }
		
		//'⊥'
		public Keyword getUpTackKeyword_9() { return cUpTackKeyword_9; }
		
		//'∀'
		public Keyword getForAllKeyword_10() { return cForAllKeyword_10; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_11() { return cExclamationMarkKeyword_11; }
		
		//'∃'
		public Keyword getThereExistsKeyword_12() { return cThereExistsKeyword_12; }
		
		//'#'
		public Keyword getNumberSignKeyword_13() { return cNumberSignKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'·'
		public Keyword getMiddleDotKeyword_15() { return cMiddleDotKeyword_15; }
		
		//'.'
		public Keyword getFullStopKeyword_16() { return cFullStopKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//// Build predicates from expressions
		//'≠'
		public Keyword getNotEqualToKeyword_18() { return cNotEqualToKeyword_18; }
		
		//'≤'
		public Keyword getLessThanOrEqualToKeyword_19() { return cLessThanOrEqualToKeyword_19; }
		
		//'<'
		public Keyword getLessThanSignKeyword_20() { return cLessThanSignKeyword_20; }
		
		//'≥'
		public Keyword getGreaterThanOrEqualToKeyword_21() { return cGreaterThanOrEqualToKeyword_21; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_22() { return cGreaterThanSignKeyword_22; }
		
		//'∈'
		public Keyword getElementOfKeyword_23() { return cElementOfKeyword_23; }
		
		//':'
		public Keyword getColonKeyword_24() { return cColonKeyword_24; }
		
		//// Include this for Rodin keyboard
		//'∉'
		public Keyword getNotAnElementOfKeyword_25() { return cNotAnElementOfKeyword_25; }
		
		//'⊂'
		public Keyword getSubsetOfKeyword_26() { return cSubsetOfKeyword_26; }
		
		//'⊄'
		public Keyword getNotASubsetOfKeyword_27() { return cNotASubsetOfKeyword_27; }
		
		//'⊆'
		public Keyword getSubsetOfOrEqualToKeyword_28() { return cSubsetOfOrEqualToKeyword_28; }
		
		//'⊈'
		public Keyword getNeitherASubsetOfNorEqualToKeyword_29() { return cNeitherASubsetOfNorEqualToKeyword_29; }
		
		//'partition'
		public Keyword getPartitionKeyword_30() { return cPartitionKeyword_30; }
	}
	public class EVENTB_EXPRESSION_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.EVENTB_EXPRESSION_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftRightArrowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateUseAreaE100Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrivateUseAreaE101Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateUseAreaE102Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightwardsArrowWithVerticalStrokeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightwardsArrowWithTailWithVerticalStrokeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightwardsArrowWithTailKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightwardsTwoHeadedArrowKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRightwardsTwoHeadedArrowWithTailKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRightwardsArrowFromBarKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cEmptySetKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIntersectionKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUnionKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSetMinusKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMultiplicationSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLeftSquareBracketKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cRightSquareBracketKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cPrivateUseAreaE103Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRingOperatorKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cSemicolonKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cCircledTimesKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cParallelToKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cTildeOperatorKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cWhiteLeftPointingTriangleKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cZNotationDomainAntirestrictionKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cWhiteRightPointingTriangleKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cZNotationRangeAntirestrictionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cGreekSmallLetterLamdaKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Keyword cPercentSignKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cNAryIntersectionKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Keyword cNAryUnionKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cDividesKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cTwoDotLeaderKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cPlusSignKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cMinusSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cHyphenMinusKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cAsteriskOperatorKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cAsteriskKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDivisionSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cSolidusKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cCircumflexAccentKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cBackslashKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		
		//EVENTB_EXPRESSION_SYMBOLS:
		//	'↔' | // Symbols for building set of relations
		//	'' |
		//	'' |
		//	'' |
		//	'⇸' |
		//	'→' |
		//	'⤔' |
		//	'↣' |
		//	'⤀' |
		//	'↠' |
		//	'⤖' |
		//	'{' | // Symbols for manipulating sets
		//	'}' |
		//	'↦' |
		//	'∅' |
		//	'∩' |
		//	'∪' |
		//	'∖' |
		//	'×' |
		//	'[' | // Symbols for manipulating functions and relations
		//	']' |
		//	'' |
		//	'∘' |
		//	';' |
		//	'⊗' |
		//	'∥' |
		//	'∼' |
		//	'◁' |
		//	'⩤' |
		//	'▷' |
		//	'⩥' |
		//	'λ' | '%' // Symbols for quantified expressions
		//	'⋂' |
		//	'⋃' |
		//	'∣' |
		//	'‥' | // Symbols for arithmetic expressions
		//	'+' |
		//	'−' | '-' |
		//	'∗' | '*' |
		//	'÷' | '/' |
		//	'^' |
		//	'\\' // Allowed for LaTeX combos
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'↔' | // Symbols for building set of relations
		//'' | '' | '' | '⇸' | '→' | '⤔' | '↣' | '⤀' | '↠' | '⤖' | '{' | // Symbols for manipulating sets
		//'}' | '↦' | '∅' | '∩' | '∪' | '∖' | '×' | '[' | // Symbols for manipulating functions and relations
		//']' | '' | '∘' | ';' | '⊗' | '∥' | '∼' | '◁' | '⩤' | '▷' | '⩥' | 'λ' | '%' // Symbols for quantified expressions
		//'⋂' | '⋃' | '∣' | '‥' | // Symbols for arithmetic expressions
		//'+' | '−' | '-' | '∗' | '*' | '÷' | '/' | '^' | '\\'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'↔'
		public Keyword getLeftRightArrowKeyword_0() { return cLeftRightArrowKeyword_0; }
		
		//// Symbols for building set of relations
		//''
		public Keyword getPrivateUseAreaE100Keyword_1() { return cPrivateUseAreaE100Keyword_1; }
		
		//''
		public Keyword getPrivateUseAreaE101Keyword_2() { return cPrivateUseAreaE101Keyword_2; }
		
		//''
		public Keyword getPrivateUseAreaE102Keyword_3() { return cPrivateUseAreaE102Keyword_3; }
		
		//'⇸'
		public Keyword getRightwardsArrowWithVerticalStrokeKeyword_4() { return cRightwardsArrowWithVerticalStrokeKeyword_4; }
		
		//'→'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//'⤔'
		public Keyword getRightwardsArrowWithTailWithVerticalStrokeKeyword_6() { return cRightwardsArrowWithTailWithVerticalStrokeKeyword_6; }
		
		//'↣'
		public Keyword getRightwardsArrowWithTailKeyword_7() { return cRightwardsArrowWithTailKeyword_7; }
		
		//'⤀'
		public Keyword getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8() { return cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8; }
		
		//'↠'
		public Keyword getRightwardsTwoHeadedArrowKeyword_9() { return cRightwardsTwoHeadedArrowKeyword_9; }
		
		//'⤖'
		public Keyword getRightwardsTwoHeadedArrowWithTailKeyword_10() { return cRightwardsTwoHeadedArrowWithTailKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//// Symbols for manipulating sets
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'↦'
		public Keyword getRightwardsArrowFromBarKeyword_13() { return cRightwardsArrowFromBarKeyword_13; }
		
		//'∅'
		public Keyword getEmptySetKeyword_14() { return cEmptySetKeyword_14; }
		
		//'∩'
		public Keyword getIntersectionKeyword_15() { return cIntersectionKeyword_15; }
		
		//'∪'
		public Keyword getUnionKeyword_16() { return cUnionKeyword_16; }
		
		//'∖'
		public Keyword getSetMinusKeyword_17() { return cSetMinusKeyword_17; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_18() { return cMultiplicationSignKeyword_18; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_19() { return cLeftSquareBracketKeyword_19; }
		
		//// Symbols for manipulating functions and relations
		//']'
		public Keyword getRightSquareBracketKeyword_20() { return cRightSquareBracketKeyword_20; }
		
		//''
		public Keyword getPrivateUseAreaE103Keyword_21() { return cPrivateUseAreaE103Keyword_21; }
		
		//'∘'
		public Keyword getRingOperatorKeyword_22() { return cRingOperatorKeyword_22; }
		
		//';'
		public Keyword getSemicolonKeyword_23() { return cSemicolonKeyword_23; }
		
		//'⊗'
		public Keyword getCircledTimesKeyword_24() { return cCircledTimesKeyword_24; }
		
		//'∥'
		public Keyword getParallelToKeyword_25() { return cParallelToKeyword_25; }
		
		//'∼'
		public Keyword getTildeOperatorKeyword_26() { return cTildeOperatorKeyword_26; }
		
		//'◁'
		public Keyword getWhiteLeftPointingTriangleKeyword_27() { return cWhiteLeftPointingTriangleKeyword_27; }
		
		//'⩤'
		public Keyword getZNotationDomainAntirestrictionKeyword_28() { return cZNotationDomainAntirestrictionKeyword_28; }
		
		//'▷'
		public Keyword getWhiteRightPointingTriangleKeyword_29() { return cWhiteRightPointingTriangleKeyword_29; }
		
		//'⩥'
		public Keyword getZNotationRangeAntirestrictionKeyword_30() { return cZNotationRangeAntirestrictionKeyword_30; }
		
		//'λ'
		public Keyword getGreekSmallLetterLamdaKeyword_31() { return cGreekSmallLetterLamdaKeyword_31; }
		
		//'%' // Symbols for quantified expressions
		//'⋂'
		public Group getGroup_32() { return cGroup_32; }
		
		//'%'
		public Keyword getPercentSignKeyword_32_0() { return cPercentSignKeyword_32_0; }
		
		//// Symbols for quantified expressions
		//'⋂'
		public Keyword getNAryIntersectionKeyword_32_1() { return cNAryIntersectionKeyword_32_1; }
		
		//'⋃'
		public Keyword getNAryUnionKeyword_33() { return cNAryUnionKeyword_33; }
		
		//'∣'
		public Keyword getDividesKeyword_34() { return cDividesKeyword_34; }
		
		//'‥'
		public Keyword getTwoDotLeaderKeyword_35() { return cTwoDotLeaderKeyword_35; }
		
		//// Symbols for arithmetic expressions
		//'+'
		public Keyword getPlusSignKeyword_36() { return cPlusSignKeyword_36; }
		
		//'−'
		public Keyword getMinusSignKeyword_37() { return cMinusSignKeyword_37; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_38() { return cHyphenMinusKeyword_38; }
		
		//'∗'
		public Keyword getAsteriskOperatorKeyword_39() { return cAsteriskOperatorKeyword_39; }
		
		//'*'
		public Keyword getAsteriskKeyword_40() { return cAsteriskKeyword_40; }
		
		//'÷'
		public Keyword getDivisionSignKeyword_41() { return cDivisionSignKeyword_41; }
		
		//'/'
		public Keyword getSolidusKeyword_42() { return cSolidusKeyword_42; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_43() { return cCircumflexAccentKeyword_43; }
		
		//'\\'
		public Keyword getBackslashKeyword_44() { return cBackslashKeyword_44; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheoremAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTheoremTheoremKeyword_0_0 = (Keyword)cTheoremAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXFormulaParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		///*********************************************
		// * machine related grammar
		// ********************************************/ Invariant emachine::Invariant:
		//	theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_0() { return cTheoremAssignment_0; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_0_0() { return cTheoremTheoremKeyword_0_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_2_0() { return cPredicateXFormulaParserRuleCall_2_0; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheoremAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTheoremTheoremKeyword_0_0 = (Keyword)cTheoremAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXFormulaParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//Guard emachine::Guard:
		//	theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_0() { return cTheoremAssignment_0; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_0_0() { return cTheoremTheoremKeyword_0_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_2_0() { return cPredicateXFormulaParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLABELTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionXFormulaParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//Action emachine::Action:
		//	name=XLABEL action=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLABEL action=XFormula
		public Group getGroup() { return cGroup; }
		
		//name=XLABEL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_0_0() { return cNameXLABELTerminalRuleCall_0_0; }
		
		//action=XFormula
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//XFormula
		public RuleCall getActionXFormulaParserRuleCall_1_0() { return cActionXFormulaParserRuleCall_1_0; }
	}
	public class WitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.Witness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLABELTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateXFormulaParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//Witness emachine::Witness:
		//	name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//name=XLABEL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_0_0() { return cNameXLABELTerminalRuleCall_0_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_1_0() { return cPredicateXFormulaParserRuleCall_1_0; }
	}
	
	public class TranslationKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.TranslationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIVAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIVARVariablesKeyword_0_0 = (Keyword)cMULTIVAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLEVAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSINGLEVAREnumerationKeyword_1_0 = (Keyword)cSINGLEVAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFINEDVAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFINEDVARREFINEDVARKeyword_2_0 = (Keyword)cREFINEDVAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TranslationKind returns estatemachines::TranslationKind:
		//	MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR;
		public EnumRule getRule() { return rule; }
		
		//MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIVAR='variables'
		public EnumLiteralDeclaration getMULTIVAREnumLiteralDeclaration_0() { return cMULTIVAREnumLiteralDeclaration_0; }
		
		//'variables'
		public Keyword getMULTIVARVariablesKeyword_0_0() { return cMULTIVARVariablesKeyword_0_0; }
		
		//SINGLEVAR='enumeration'
		public EnumLiteralDeclaration getSINGLEVAREnumLiteralDeclaration_1() { return cSINGLEVAREnumLiteralDeclaration_1; }
		
		//'enumeration'
		public Keyword getSINGLEVAREnumerationKeyword_1_0() { return cSINGLEVAREnumerationKeyword_1_0; }
		
		//REFINEDVAR
		public EnumLiteralDeclaration getREFINEDVAREnumLiteralDeclaration_2() { return cREFINEDVAREnumLiteralDeclaration_2; }
		
		//'REFINEDVAR'
		public Keyword getREFINEDVARREFINEDVARKeyword_2_0() { return cREFINEDVARREFINEDVARKeyword_2_0; }
	}
	public class MethodKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.MethodKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNormalNormalKeyword_0_0 = (Keyword)cNormalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConstructorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConstructorConstructorKeyword_1_0 = (Keyword)cConstructorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDestructorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDestructorDestructorKeyword_2_0 = (Keyword)cDestructorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MethodKind returns eclassdiagrams::MethodKind:
		//	normal | constructor | destructor;
		public EnumRule getRule() { return rule; }
		
		//normal | constructor | destructor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_0() { return cNormalEnumLiteralDeclaration_0; }
		
		//'normal'
		public Keyword getNormalNormalKeyword_0_0() { return cNormalNormalKeyword_0_0; }
		
		//constructor
		public EnumLiteralDeclaration getConstructorEnumLiteralDeclaration_1() { return cConstructorEnumLiteralDeclaration_1; }
		
		//'constructor'
		public Keyword getConstructorConstructorKeyword_1_0() { return cConstructorConstructorKeyword_1_0; }
		
		//destructor
		public EnumLiteralDeclaration getDestructorEnumLiteralDeclaration_2() { return cDestructorEnumLiteralDeclaration_2; }
		
		//'destructor'
		public Keyword getDestructorDestructorKeyword_2_0() { return cDestructorDestructorKeyword_2_0; }
	}
	public class DataKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.DataKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSETSetKeyword_0_0 = (Keyword)cSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTANTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONSTANTConstantKeyword_1_0 = (Keyword)cCONSTANTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVARIABLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVARIABLEVariableKeyword_2_0 = (Keyword)cVARIABLEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DataKind returns ecoreextension::DataKind:
		//	SET='set' | CONSTANT='constant' | VARIABLE='variable';
		public EnumRule getRule() { return rule; }
		
		//SET='set' | CONSTANT='constant' | VARIABLE='variable'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SET='set'
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_0() { return cSETEnumLiteralDeclaration_0; }
		
		//'set'
		public Keyword getSETSetKeyword_0_0() { return cSETSetKeyword_0_0; }
		
		//CONSTANT='constant'
		public EnumLiteralDeclaration getCONSTANTEnumLiteralDeclaration_1() { return cCONSTANTEnumLiteralDeclaration_1; }
		
		//'constant'
		public Keyword getCONSTANTConstantKeyword_1_0() { return cCONSTANTConstantKeyword_1_0; }
		
		//VARIABLE='variable'
		public EnumLiteralDeclaration getVARIABLEEnumLiteralDeclaration_2() { return cVARIABLEEnumLiteralDeclaration_2; }
		
		//'variable'
		public Keyword getVARIABLEVariableKeyword_2_0() { return cVARIABLEVariableKeyword_2_0; }
	}
	
	private final XUMLBElements pXUMLB;
	private final XDiagramElements pXDiagram;
	private final StatemachineElements pStatemachine;
	private final AbstractNodeElements pAbstractNode;
	private final TransitionElements pTransition;
	private final TranslationKindElements eTranslationKind;
	private final TypedParameterElements pTypedParameter;
	private final XTypeElements pXType;
	private final XComplexTypeElements pXComplexType;
	private final EVENT_B_BUILDIN_TYPEElements pEVENT_B_BUILDIN_TYPE;
	private final StateElements pState;
	private final InitialElements pInitial;
	private final FinalElements pFinal;
	private final AnyElements pAny;
	private final JunctionElements pJunction;
	private final ForkElements pFork;
	private final ClassdiagramElements pClassdiagram;
	private final EventBSuperTypeElements pEventBSuperType;
	private final ClassElements pClass;
	private final AssociationElements pAssociation;
	private final SubtypeGroupElements pSubtypeGroup;
	private final ClassAttributeElements pClassAttribute;
	private final ClassConstraintElements pClassConstraint;
	private final ClassMethodElements pClassMethod;
	private final MethodKindElements eMethodKind;
	private final DataKindElements eDataKind;
	private final EStringElements pEString;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tXLABEL;
	private final XFormulaElements pXFormula;
	private final EVENTB_IDENTIFIER_KEYWORDElements pEVENTB_IDENTIFIER_KEYWORD;
	private final EVENTB_PREDICATE_SYMBOLSElements pEVENTB_PREDICATE_SYMBOLS;
	private final EVENTB_EXPRESSION_SYMBOLSElements pEVENTB_EXPRESSION_SYMBOLS;
	private final TerminalRule tID;
	private final InvariantElements pInvariant;
	private final GuardElements pGuard;
	private final ActionElements pAction;
	private final WitnessElements pWitness;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XUmlbGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXUMLB = new XUMLBElements();
		this.pXDiagram = new XDiagramElements();
		this.pStatemachine = new StatemachineElements();
		this.pAbstractNode = new AbstractNodeElements();
		this.pTransition = new TransitionElements();
		this.eTranslationKind = new TranslationKindElements();
		this.pTypedParameter = new TypedParameterElements();
		this.pXType = new XTypeElements();
		this.pXComplexType = new XComplexTypeElements();
		this.pEVENT_B_BUILDIN_TYPE = new EVENT_B_BUILDIN_TYPEElements();
		this.pState = new StateElements();
		this.pInitial = new InitialElements();
		this.pFinal = new FinalElements();
		this.pAny = new AnyElements();
		this.pJunction = new JunctionElements();
		this.pFork = new ForkElements();
		this.pClassdiagram = new ClassdiagramElements();
		this.pEventBSuperType = new EventBSuperTypeElements();
		this.pClass = new ClassElements();
		this.pAssociation = new AssociationElements();
		this.pSubtypeGroup = new SubtypeGroupElements();
		this.pClassAttribute = new ClassAttributeElements();
		this.pClassConstraint = new ClassConstraintElements();
		this.pClassMethod = new ClassMethodElements();
		this.eMethodKind = new MethodKindElements();
		this.eDataKind = new DataKindElements();
		this.pEString = new EStringElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.XLABEL");
		this.pXFormula = new XFormulaElements();
		this.pEVENTB_IDENTIFIER_KEYWORD = new EVENTB_IDENTIFIER_KEYWORDElements();
		this.pEVENTB_PREDICATE_SYMBOLS = new EVENTB_PREDICATE_SYMBOLSElements();
		this.pEVENTB_EXPRESSION_SYMBOLS = new EVENTB_EXPRESSION_SYMBOLSElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.XUmlb.ID");
		this.pInvariant = new InvariantElements();
		this.pGuard = new GuardElements();
		this.pAction = new ActionElements();
		this.pWitness = new WitnessElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xumlb.XUmlb".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XUMLB ediagrams::UMLB:
	//	'UMLB'
	//	name=ID ('elaborates' elaborates=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName])? ('refines'
	//	refines=[ediagrams::UMLB|QualifiedName])?
	//	diagrams+=XDiagram*;
	public XUMLBElements getXUMLBAccess() {
		return pXUMLB;
	}
	
	public ParserRule getXUMLBRule() {
		return getXUMLBAccess().getRule();
	}
	
	//XDiagram ediagrams::Diagram:
	//	Statemachine | Classdiagram;
	public XDiagramElements getXDiagramAccess() {
		return pXDiagram;
	}
	
	public ParserRule getXDiagramRule() {
		return getXDiagramAccess().getRule();
	}
	
	///********************************************
	// * Statemachine grammar
	// ********************************************/ Statemachine estatemachines::Statemachine:
	//	{estatemachines::Statemachine}
	//	'statemachine'
	//	name=ID '(' translation=TranslationKind ')' ('refines' refines=[estatemachines::Statemachine|QualifiedName])?
	//	('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
	//	'selfName' selfName=EString)?
	//	nodes+=AbstractNode*
	//	transitions+=Transition*
	//	'end';
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	//AbstractNode estatemachines::AbstractNode:
	//	State | Initial | Final | Any | Junction | Fork;
	public AbstractNodeElements getAbstractNodeAccess() {
		return pAbstractNode;
	}
	
	public ParserRule getAbstractNodeRule() {
		return getAbstractNodeAccess().getRule();
	}
	
	//Transition estatemachines::Transition:
	//	{estatemachines::Transition}
	//	'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
	//	extended?='extended'?
	//	//		('refines' refines=[coreextension::EventBEventGroup|EString])?
	//	'source' source=[estatemachines::AbstractNode|QualifiedName]
	//	'target' target=[estatemachines::AbstractNode|QualifiedName] ('any' parameters+=TypedParameter (','
	//	parameters+=TypedParameter)*)? ('where' guards+=Guard+)? ('then' actions+=Action+)? ('with' witnesses+=Witness+)?
	//	'end';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum TranslationKind returns estatemachines::TranslationKind:
	//	MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR;
	public TranslationKindElements getTranslationKindAccess() {
		return eTranslationKind;
	}
	
	public EnumRule getTranslationKindRule() {
		return getTranslationKindAccess().getRule();
	}
	
	//TypedParameter ecoreextension::TypedParameter:
	//	name=ID ':' type=XType;
	public TypedParameterElements getTypedParameterAccess() {
		return pTypedParameter;
	}
	
	public ParserRule getTypedParameterRule() {
		return getTypedParameterAccess().getRule();
	}
	
	//XType:
	//	XComplexType ('×' XComplexType)*;
	public XTypeElements getXTypeAccess() {
		return pXType;
	}
	
	public ParserRule getXTypeRule() {
		return getXTypeAccess().getRule();
	}
	
	//XComplexType:
	//	'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID;
	public XComplexTypeElements getXComplexTypeAccess() {
		return pXComplexType;
	}
	
	public ParserRule getXComplexTypeRule() {
		return getXComplexTypeAccess().getRule();
	}
	
	//EVENT_B_BUILDIN_TYPE:
	//	'BOOL' |
	//	'ℤ';
	public EVENT_B_BUILDIN_TYPEElements getEVENT_B_BUILDIN_TYPEAccess() {
		return pEVENT_B_BUILDIN_TYPE;
	}
	
	public ParserRule getEVENT_B_BUILDIN_TYPERule() {
		return getEVENT_B_BUILDIN_TYPEAccess().getRule();
	}
	
	//State estatemachines::State:
	//	{estatemachines::State}
	//	'state'
	//	name=EString ('refines' refines=[estatemachines::State|QualifiedName])? ('statemachines' 'begin'
	//	statemachines+=Statemachine statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)?
	//	('entryActions' entryActions+=Action+)? ('exitActions' exitActions+=Action+)?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Initial estatemachines::Initial:
	//	'initial' name=EString;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Final estatemachines::Final:
	//	'final' name=EString;
	public FinalElements getFinalAccess() {
		return pFinal;
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}
	
	//Any estatemachines::Any:
	//	'any' name=EString;
	public AnyElements getAnyAccess() {
		return pAny;
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}
	
	//Junction estatemachines::Junction:
	//	'junction' name=EString;
	public JunctionElements getJunctionAccess() {
		return pJunction;
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}
	
	//Fork estatemachines::Fork:
	//	'fork' name=EString;
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}
	
	///*********************************************
	// * Class Diagram Grammar
	// ********************************************/ Classdiagram eclassdiagrams::Classdiagram:
	//	{eclassdiagrams::Classdiagram}
	//	'classdiagram'
	//	name=ID ('refines' refines=[eclassdiagrams::Classdiagram|QualifiedName])?
	//	//		('classes' classes+=Class+)? 
	//	classes+=Class* associations+=Association* 'end';
	public ClassdiagramElements getClassdiagramAccess() {
		return pClassdiagram;
	}
	
	public ParserRule getClassdiagramRule() {
		return getClassdiagramAccess().getRule();
	}
	
	//EventBSuperType eclassdiagrams::EventBSuperType:
	//	Class | SubtypeGroup;
	public EventBSuperTypeElements getEventBSuperTypeAccess() {
		return pEventBSuperType;
	}
	
	public ParserRule getEventBSuperTypeRule() {
		return getEventBSuperTypeAccess().getRule();
	}
	
	//Class eclassdiagrams::Class:
	//	{eclassdiagrams::Class}
	//	'class'
	//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])? ('selfName'
	//	selfName=EString)? ('instances' instances=EString)? ('supertypes' supertypes+=[eclassdiagrams::EventBSuperType]+)?
	//	('refines' refines=[eclassdiagrams::Class|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine+
	//	'end')?
	//	classAttributes+=ClassAttribute* constraints+=ClassConstraint* methods+=ClassMethod* ('subtypeGroups'
	//	subtypeGroups+=SubtypeGroup+)?;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Association eclassdiagrams::Association:
	//	{eclassdiagrams::Association}
	//	'association'
	//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
	//	functional?='functional'?
	//	total?='total'?
	//	surjective?='surjective'?
	//	injective?='injective'? ('initialValue' initialValue=EString)?
	//	'source' source=[eclassdiagrams::Class|QualifiedName]
	//	'target' target=[eclassdiagrams::Class|QualifiedName];
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//SubtypeGroup eclassdiagrams::SubtypeGroup:
	//	{eclassdiagrams::SubtypeGroup}
	//	'SubtypeGroup'
	//	name=ID
	//	cover?='cover'?
	//	disjoint?='disjoint'?
	//	//		('subtypes' subtypes += [eclassdiagrams::Class|QualifiedName]+)?
	//;
	public SubtypeGroupElements getSubtypeGroupAccess() {
		return pSubtypeGroup;
	}
	
	public ParserRule getSubtypeGroupRule() {
		return getSubtypeGroupAccess().getRule();
	}
	
	//ClassAttribute eclassdiagrams::ClassAttribute:
	//	{eclassdiagrams::ClassAttribute}
	//	'attribute'
	//	name=ID '(' dataKind=DataKind ')' ('elaborates' elaborates=[eventbcore::EventBNamed|QualifiedName])?
	//	functional?='functional'?
	//	total?='total'?
	//	surjective?='surjective'?
	//	injective?='injective'? ('initialValue' initialValue=EString)?
	//	'target' target=EString;
	public ClassAttributeElements getClassAttributeAccess() {
		return pClassAttribute;
	}
	
	public ParserRule getClassAttributeRule() {
		return getClassAttributeAccess().getRule();
	}
	
	//ClassConstraint eclassdiagrams::ClassConstraint:
	//	{eclassdiagrams::ClassConstraint}
	//	'constraint'
	//	theorem?='theorem'? name=ID //maybe XLabel instead of ID
	//	predicate=XFormula
	//	'component' component=[eventbcore::EventBNamedCommentedComponentElement|QualifiedName];
	public ClassConstraintElements getClassConstraintAccess() {
		return pClassConstraint;
	}
	
	public ParserRule getClassConstraintRule() {
		return getClassConstraintAccess().getRule();
	}
	
	//ClassMethod eclassdiagrams::ClassMethod:
	//	{eclassdiagrams::ClassMethod}
	//	'method' // How to reference the event
	//	'kind' kind=MethodKind ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
	//	extended?='extended'? ('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)? ('where' guards+=Guard+)?
	//	('then' actions+=Action+)? ('with' witnesses+=Witness+)?
	//	'end';
	public ClassMethodElements getClassMethodAccess() {
		return pClassMethod;
	}
	
	public ParserRule getClassMethodRule() {
		return getClassMethodAccess().getRule();
	}
	
	//enum MethodKind returns eclassdiagrams::MethodKind:
	//	normal | constructor | destructor;
	public MethodKindElements getMethodKindAccess() {
		return eMethodKind;
	}
	
	public EnumRule getMethodKindRule() {
		return getMethodKindAccess().getRule();
	}
	
	//enum DataKind returns ecoreextension::DataKind:
	//	SET='set' | CONSTANT='constant' | VARIABLE='variable';
	public DataKindElements getDataKindAccess() {
		return eDataKind;
	}
	
	public EnumRule getDataKindRule() {
		return getDataKindAccess().getRule();
	}
	
	///*********************************************
	// * Generic grammar
	// ********************************************/ EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XFormula:
	//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
	public XFormulaElements getXFormulaAccess() {
		return pXFormula;
	}
	
	public ParserRule getXFormulaRule() {
		return getXFormulaAccess().getRule();
	}
	
	//EVENTB_IDENTIFIER_KEYWORD:
	//	'BOOL' |
	//	'FALSE' |
	//	'TRUE' |
	//	'bool' |
	//	'card' |
	//	'dom' |
	//	'finite' |
	//	'id' |
	//	'inter' |
	//	'max' |
	//	'min' |
	//	'mod' |
	//	'pred' |
	//	'prj1' |
	//	'prj2' |
	//	'ran' |
	//	'succ' |
	//	'union' |
	//	'ℕ1' |
	//	'ℕ' |
	//	'ℙ1' |
	//	'ℙ' |
	//	'ℤ';
	public EVENTB_IDENTIFIER_KEYWORDElements getEVENTB_IDENTIFIER_KEYWORDAccess() {
		return pEVENTB_IDENTIFIER_KEYWORD;
	}
	
	public ParserRule getEVENTB_IDENTIFIER_KEYWORDRule() {
		return getEVENTB_IDENTIFIER_KEYWORDAccess().getRule();
	}
	
	//EVENTB_PREDICATE_SYMBOLS:
	//	'(' | // Predicate calculus symbols
	//	')' |
	//	'⇔' |
	//	'⇒' |
	//	'∧' | '&' |
	//	'∨' |
	//	'¬' |
	//	'⊤' |
	//	'⊥' |
	//	'∀' | '!' |
	//	'∃' | '#' |
	//	',' |
	//	'·' | '.' |
	//	'=' | // Build predicates from expressions
	//	'≠' |
	//	'≤' |
	//	'<' |
	//	'≥' |
	//	'>' |
	//	'∈' | ':' | // Include this for Rodin keyboard
	//	'∉' |
	//	'⊂' |
	//	'⊄' |
	//	'⊆' |
	//	'⊈' |
	//	'partition' // This is missing from the Rodin D7 deliverable
	//;
	public EVENTB_PREDICATE_SYMBOLSElements getEVENTB_PREDICATE_SYMBOLSAccess() {
		return pEVENTB_PREDICATE_SYMBOLS;
	}
	
	public ParserRule getEVENTB_PREDICATE_SYMBOLSRule() {
		return getEVENTB_PREDICATE_SYMBOLSAccess().getRule();
	}
	
	//EVENTB_EXPRESSION_SYMBOLS:
	//	'↔' | // Symbols for building set of relations
	//	'' |
	//	'' |
	//	'' |
	//	'⇸' |
	//	'→' |
	//	'⤔' |
	//	'↣' |
	//	'⤀' |
	//	'↠' |
	//	'⤖' |
	//	'{' | // Symbols for manipulating sets
	//	'}' |
	//	'↦' |
	//	'∅' |
	//	'∩' |
	//	'∪' |
	//	'∖' |
	//	'×' |
	//	'[' | // Symbols for manipulating functions and relations
	//	']' |
	//	'' |
	//	'∘' |
	//	';' |
	//	'⊗' |
	//	'∥' |
	//	'∼' |
	//	'◁' |
	//	'⩤' |
	//	'▷' |
	//	'⩥' |
	//	'λ' | '%' // Symbols for quantified expressions
	//	'⋂' |
	//	'⋃' |
	//	'∣' |
	//	'‥' | // Symbols for arithmetic expressions
	//	'+' |
	//	'−' | '-' |
	//	'∗' | '*' |
	//	'÷' | '/' |
	//	'^' |
	//	'\\' // Allowed for LaTeX combos
	//;
	public EVENTB_EXPRESSION_SYMBOLSElements getEVENTB_EXPRESSION_SYMBOLSAccess() {
		return pEVENTB_EXPRESSION_SYMBOLS;
	}
	
	public ParserRule getEVENTB_EXPRESSION_SYMBOLSRule() {
		return getEVENTB_EXPRESSION_SYMBOLSAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'\\u00D6' | '\\u00D8'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'\\u00D6' |
	//	'\\u00D8'..'ￜ' | '0'..'9' | "'")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	///*********************************************
	// * machine related grammar
	// ********************************************/ Invariant emachine::Invariant:
	//	theorem?='theorem'? name=XLABEL predicate=XFormula;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//Guard emachine::Guard:
	//	theorem?='theorem'? name=XLABEL predicate=XFormula;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//Action emachine::Action:
	//	name=XLABEL action=XFormula;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Witness emachine::Witness:
	//	name=XLABEL predicate=XFormula;
	public WitnessElements getWitnessAccess() {
		return pWitness;
	}
	
	public ParserRule getWitnessRule() {
		return getWitnessAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
